6,10c6,10
< import "../../lib/SafeERC20.sol";
< import "../../lib/SafeMath.sol";
< import '../../lib/IUniswapV2Pair.sol';
< import "../../lib/UniswapV2OracleLibrary.sol";
< import "../../token/YAMTokenInterface.sol";
---
> import "../lib/SafeERC20.sol";
> import "../lib/SafeMath.sol";
> import '../lib/IUniswapV2Pair.sol';
> import "../lib/UniswapV2OracleLibrary.sol";
> import "../token/YAMTokenInterface.sol";
17c17
< contract YAMRebaser2 {
---
> contract YAMRebaser {
47,49d46
<     /// @notice an event emitted during rebase denoting how much is minted
<     event MintAmount(uint256 mintAmount);
<
140,142d136
<     /// @notice pair for reserveToken <> YAM
<     address public eth_usdc_pair;
<
153,156c147
<     uint256 public priceCumulativeLastYAMETH;
<
<     /// @notice last TWAP cumulative price;
<     uint256 public priceCumulativeLastETHUSDC;
---
>     uint256 public priceCumulativeLast;
181a173,174
>     uint256 public constant MIN_TIME_FIRST_REBASE = 1600718400; // Monday, September 21, 2020 8:00:00 PM
>
206,211c199
<
<           // get eth_usdc piar
<           address USDC = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
<
<           // USDC < WETH address, so USDC is token0
<           eth_usdc_pair = pairFor(uniswap_factory, USDC, reserveToken_);
---
>           uniSyncPairs.push(uniswap_pair);
224,226c212,214
<           // target 5% slippage
<           // ~2.6%
<           maxSlippageFactor = 2597836 * 10**10; //5409258 * 10**10;
---
>           // target 10% slippage
>           // 5.4%
>           maxSlippageFactor = 5409258 * 10**10;
228c216
<           // $1
---
>           // 1 YYCRV
231,232c219,220
<           // twice daily rebase, with targeting reaching peg in 10 days
<           rebaseLag = 20;
---
>           // twice daily rebase, with targeting reaching peg in 5 days
>           rebaseLag = 10;
392,395d379
<
<        (uint priceCumulativeUSDC, ) =
<           UniswapV2OracleLibrary.currentCumulativePrices(eth_usdc_pair, false);
<
398,399c382
<         priceCumulativeLastYAMETH = priceCumulative;
<         priceCumulativeLastETHUSDC = priceCumulativeUSDC;
---
>         priceCumulativeLast = priceCumulative;
409a393,394
>         // ensure rebase activation is allowed
>         require(now >= MIN_TIME_FIRST_REBASE, "!first_rebase");
427c412
<         require(msg.sender == tx.origin, "!EOA");
---
>         require(msg.sender == tx.origin);
473d457
<         emit MintAmount(mintAmount);
515,523c499,502
<                 uint256 amount_to_public_goods = amount1.mul(public_goods_perc).div(BASE);
<                 SafeERC20.safeTransfer(IERC20(reserveToken), reservesContract, amount1.sub(amount_to_public_goods));
<                 SafeERC20.safeTransfer(IERC20(reserveToken), public_goods, amount_to_public_goods);
<                 emit TreasuryIncreased(
<                     amount1.sub(amount_to_public_goods),
<                     uniVars.yamsToUni,
<                     uniVars.amountFromReserves,
<                     uniVars.mintToReserves
<                 );
---
>               uint256 amount_to_public_goods = amount1.mul(public_goods_perc).div(BASE);
>               SafeERC20.safeTransfer(IERC20(reserveToken), reservesContract, amount1.sub(amount_to_public_goods));
>               SafeERC20.safeTransfer(IERC20(reserveToken), public_goods, amount_to_public_goods);
>               emit TreasuryIncreased(amount1.sub(amount_to_public_goods), uniVars.yamsToUni, uniVars.amountFromReserves, uniVars.mintToReserves);
525,531c504,505
<                 SafeERC20.safeTransfer(IERC20(reserveToken), reservesContract, amount1);
<                 emit TreasuryIncreased(
<                     amount1,
<                     uniVars.yamsToUni,
<                     uniVars.amountFromReserves,
<                     uniVars.mintToReserves
<                 );
---
>               SafeERC20.safeTransfer(IERC20(reserveToken), reservesContract, amount1);
>               emit TreasuryIncreased(amount1, uniVars.yamsToUni, uniVars.amountFromReserves, uniVars.mintToReserves);
535,543c509,512
<               uint256 amount_to_public_goods = amount0.mul(public_goods_perc).div(BASE);
<               SafeERC20.safeTransfer(IERC20(reserveToken), reservesContract, amount0.sub(amount_to_public_goods));
<               SafeERC20.safeTransfer(IERC20(reserveToken), public_goods, amount_to_public_goods);
<               emit TreasuryIncreased(
<                   amount0.sub(amount_to_public_goods),
<                   uniVars.yamsToUni,
<                   uniVars.amountFromReserves,
<                   uniVars.mintToReserves
<               );
---
>             uint256 amount_to_public_goods = amount0.mul(public_goods_perc).div(BASE);
>             SafeERC20.safeTransfer(IERC20(reserveToken), reservesContract, amount0.sub(amount_to_public_goods));
>             SafeERC20.safeTransfer(IERC20(reserveToken), public_goods, amount_to_public_goods);
>             emit TreasuryIncreased(amount0.sub(amount_to_public_goods), uniVars.yamsToUni, uniVars.amountFromReserves, uniVars.mintToReserves);
545,551c514,515
<               SafeERC20.safeTransfer(IERC20(reserveToken), reservesContract, amount0);
<               emit TreasuryIncreased(
<                   amount0,
<                   uniVars.yamsToUni,
<                   uniVars.amountFromReserves,
<                   uniVars.mintToReserves
<               );
---
>             SafeERC20.safeTransfer(IERC20(reserveToken), reservesContract, amount0);
>             emit TreasuryIncreased(amount0, uniVars.yamsToUni, uniVars.amountFromReserves, uniVars.mintToReserves);
628c592,593
<                     uniVars.mintToReserves = mintAmount.sub( (tokens_to_max_slippage - excess) );
---
>                     uniVars.mintToReserves = mintAmount.sub( (tokens_to_max_slippage - excess));
>                     // swap up to slippage limit, taking entire yam reserves, and minting part of total
753,754d717
<         (uint priceCumulativeETH, ) =
<             UniswapV2OracleLibrary.currentCumulativePrices(eth_usdc_pair, false);
761,762c724
<         uint256 priceAverageYAMETH = uint256(uint224((priceCumulative - priceCumulativeLastYAMETH) / timeElapsed));
<         uint256 priceAverageETHUSDC = uint256(uint224((priceCumulativeETH - priceCumulativeLastETHUSDC) / timeElapsed));
---
>         uint256 priceAverage = uint256(uint224((priceCumulative - priceCumulativeLast) / timeElapsed));
764,765c726
<         priceCumulativeLastYAMETH = priceCumulative;
<         priceCumulativeLastETHUSDC = priceCumulativeETH;
---
>         priceCumulativeLast = priceCumulative;
771,773c732
<         uint256 YAMETHprice;
<         uint256 ETHprice;
<         if (priceAverageYAMETH > uint192(-1)) {
---
>         if (priceAverage > uint192(-1)) {
776c735
<            YAMETHprice = (priceAverageYAMETH >> 112) * BASE;
---
>            return (priceAverage >> 112) * BASE;
780,787c739
<         YAMETHprice = (priceAverageYAMETH * BASE) >> 112;
<
<         if (priceAverageETHUSDC > uint192(-1)) {
<            ETHprice = (priceAverageETHUSDC >> 112) * BASE;
<         }
<         ETHprice = (priceAverageETHUSDC * BASE) >> 112;
<
<         return YAMETHprice.mul(ETHprice).div(10**6);
---
>         return (priceAverage * BASE) >> 112;
799,804c751,753
<         (uint priceCumulative, uint32 blockTimestamp) =
<            UniswapV2OracleLibrary.currentCumulativePrices(uniswap_pair, isToken0);
<         (uint priceCumulativeETH, ) =
<            UniswapV2OracleLibrary.currentCumulativePrices(eth_usdc_pair, false);
<
<         uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired
---
>       (uint priceCumulative, uint32 blockTimestamp) =
>          UniswapV2OracleLibrary.currentCumulativePrices(uniswap_pair, isToken0);
>        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired
808,828c757,758
<        uint256 priceAverageYAMETH = uint256(uint224((priceCumulative - priceCumulativeLastYAMETH) / timeElapsed));
<        uint256 priceAverageETHUSDC = uint256(uint224((priceCumulativeETH - priceCumulativeLastETHUSDC) / timeElapsed));
<
<        // BASE is on order of 1e18, which takes 2^60 bits
<        // multiplication will revert if priceAverage > 2^196
<        // (which it can because it overflows intentially)
<        uint256 YAMETHprice;
<        uint256 ETHprice;
<        if (priceAverageYAMETH > uint192(-1)) {
<           // eat loss of precision
<           // effectively: (x / 2**112) * 1e18
<           YAMETHprice = (priceAverageYAMETH >> 112) * BASE;
<        }
<        // cant overflow
<        // effectively: (x * 1e18 / 2**112)
<        YAMETHprice = (priceAverageYAMETH * BASE) >> 112;
<
<        if (priceAverageETHUSDC > uint192(-1)) {
<           ETHprice = (priceAverageETHUSDC >> 112) * BASE;
<        }
<        ETHprice = (priceAverageETHUSDC * BASE) >> 112;
---
>        // overflow is desired
>         uint256 priceAverage = uint256(uint224((priceCumulative - priceCumulativeLast) / timeElapsed));
830c760,770
<        return YAMETHprice.mul(ETHprice).div(10**6);
---
>         // BASE is on order of 1e18, which takes 2^60 bits
>         // multiplication will revert if priceAverage > 2^196
>         // (which it can because it overflows intentially)
>         if (priceAverage > uint192(-1)) {
>             // eat loss of precision
>             // effectively: (x / 2**112) * 1e18
>             return (priceAverage >> 112) * BASE;
>         }
>         // cant overflow
>         // effectively: (x * 1e18 / 2**112)
>         return (priceAverage * BASE) >> 112;
