18a19
> // all votes work on underlying _yamBalances[address], not balanceOf(address)
20c21,35
< import "../../lib/SafeMath.sol";
---
> // Original audit: https://blog.openzeppelin.com/compound-alpha-governance-system-audit/
> // Overview:
> //    No Critical
> //    High:
> //      Issue:
> //        Approved proposal may be impossible to queue, cancel or execute
> //        Fixed with `proposalMaxOperations`
> //      Issue:
> //        Queued proposal with repeated actions cannot be executed
> //        Fixed by explicitly disallow proposals with repeated actions to be queued in the Timelock contract.
> //
> // Changes made by YAM after audit:
> //    Formatting, naming, & uint256 instead of uint
> //    Since YAM supply changes, updated quorum & proposal requirements
> //    If any uint96, changed to uint256 to match YAM as opposed to comp
22c37,40
< contract DualGovernorAlpha {
---
> 
> import "../lib/SafeMath.sol";
> 
> contract GovernorAlpha {
53,55d70
<     /// @notice Addresses of LP Staking Contracts
<     address[] public incentivizers;
< 
151c166
<     constructor(address timelock_, address yam_, address[] memory incentivizers_) public {
---
>     constructor(address timelock_, address yam_) public {
154d168
<         incentivizers = incentivizers_;
158,202d171
<     function addIncentivizer(address incentivizer)
<         public
<     {
<         require(msg.sender == address(timelock), "GovernorAlpha::!timelock");
<         incentivizers.push(incentivizer);
<     }
< 
<     function removeIncentivizer(uint256 index)
<         public
<     {
<         require(msg.sender == address(timelock), "GovernorAlpha::!timelock");
<         if (index >= incentivizers.length) return;
<         for (uint i = index; i < incentivizers.length-1; i++) {
<             incentivizers[i] = incentivizers[i+1];
<         }
<         incentivizers.length--;
<     }
< 
<     function getPriorVotes(address account, uint256 blockNumber)
<         public
<         returns (uint256)
<     {
<         // -- get prior votes for yam
<         require(blockNumber < block.number, "Gov::getPriorVotes: not yet determined");
< 
<         uint256 votes = yam.getPriorVotes(account, blockNumber);
<         for (uint256 i = 0; i < incentivizers.length; i++) {
<             // get prior votes for staking (stakers get full pool power)
<             votes = SafeMath.add(votes, Incentivizer(incentivizers[i]).getPriorVotes(account, blockNumber));
<         }
<         return votes;
<     }
< 
<     function getCurrentVotes(address account)
<         public
<         returns (uint256)
<     {
<         uint256 votes = yam.getCurrentVotes(account);
<         for (uint256 i = 0; i < incentivizers.length; i++) {
<             // get prior votes for staking (stakers get full pool power)
<             votes = SafeMath.add(votes, Incentivizer(incentivizers[i]).getCurrentVotes(account));
<         }
<         return votes;
<     }
< 
213c182
<         require(getPriorVotes(msg.sender, sub256(block.number, 1)) >= proposalThreshold(), "GovernorAlpha::propose: proposer votes below proposal threshold");
---
>         require(yam.getPriorVotes(msg.sender, sub256(block.number, 1)) >= proposalThreshold(), "GovernorAlpha::propose: proposer votes below proposal threshold");
327c296
<         require(msg.sender == guardian || getPriorVotes(proposal.proposer, sub256(block.number, 1)) < proposalThreshold(), "GovernorAlpha::cancel: proposer above threshold");
---
>         require(msg.sender == guardian || yam.getPriorVotes(proposal.proposer, sub256(block.number, 1)) < proposalThreshold(), "GovernorAlpha::cancel: proposer above threshold");
441c410
<         uint256 votes = getPriorVotes(voter, proposal.startBlock);
---
>         uint256 votes = yam.getPriorVotes(voter, proposal.startBlock);
500d468
<     function getCurrentVotes(address account) external view returns (uint256);
502,506d469
< }
< 
< interface Incentivizer {
<     function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256);
<     function getCurrentVotes(address account) external view returns (uint256);
